/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { QueueService } from "../queue.service";
import { QueueCreateInput } from "./QueueCreateInput";
import { Queue } from "./Queue";
import { QueueFindManyArgs } from "./QueueFindManyArgs";
import { QueueWhereUniqueInput } from "./QueueWhereUniqueInput";
import { QueueUpdateInput } from "./QueueUpdateInput";

export class QueueControllerBase {
  constructor(protected readonly service: QueueService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Queue })
  async createQueue(@common.Body() data: QueueCreateInput): Promise<Queue> {
    return await this.service.createQueue({
      data: {
        ...data,

        car: data.car
          ? {
              connect: data.car,
            }
          : undefined,

        service: data.service
          ? {
              connect: data.service,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        status: true,

        car: {
          select: {
            id: true,
          },
        },

        service: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Queue] })
  @ApiNestedQuery(QueueFindManyArgs)
  async queues(@common.Req() request: Request): Promise<Queue[]> {
    const args = plainToClass(QueueFindManyArgs, request.query);
    return this.service.queues({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        status: true,

        car: {
          select: {
            id: true,
          },
        },

        service: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Queue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async queue(
    @common.Param() params: QueueWhereUniqueInput
  ): Promise<Queue | null> {
    const result = await this.service.queue({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        status: true,

        car: {
          select: {
            id: true,
          },
        },

        service: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Queue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateQueue(
    @common.Param() params: QueueWhereUniqueInput,
    @common.Body() data: QueueUpdateInput
  ): Promise<Queue | null> {
    try {
      return await this.service.updateQueue({
        where: params,
        data: {
          ...data,

          car: data.car
            ? {
                connect: data.car,
              }
            : undefined,

          service: data.service
            ? {
                connect: data.service,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          status: true,

          car: {
            select: {
              id: true,
            },
          },

          service: {
            select: {
              id: true,
            },
          },

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Queue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteQueue(
    @common.Param() params: QueueWhereUniqueInput
  ): Promise<Queue | null> {
    try {
      return await this.service.deleteQueue({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          status: true,

          car: {
            select: {
              id: true,
            },
          },

          service: {
            select: {
              id: true,
            },
          },

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
