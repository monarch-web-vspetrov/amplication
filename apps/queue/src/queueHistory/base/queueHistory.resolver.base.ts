/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { QueueHistory } from "./QueueHistory";
import { QueueHistoryCountArgs } from "./QueueHistoryCountArgs";
import { QueueHistoryFindManyArgs } from "./QueueHistoryFindManyArgs";
import { QueueHistoryFindUniqueArgs } from "./QueueHistoryFindUniqueArgs";
import { CreateQueueHistoryArgs } from "./CreateQueueHistoryArgs";
import { UpdateQueueHistoryArgs } from "./UpdateQueueHistoryArgs";
import { DeleteQueueHistoryArgs } from "./DeleteQueueHistoryArgs";
import { Queue } from "../../queue/base/Queue";
import { QueueStatus } from "../../queueStatus/base/QueueStatus";
import { QueueHistoryService } from "../queueHistory.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => QueueHistory)
export class QueueHistoryResolverBase {
  constructor(
    protected readonly service: QueueHistoryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "QueueHistory",
    action: "read",
    possession: "any",
  })
  async _queueHistoriesMeta(
    @graphql.Args() args: QueueHistoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [QueueHistory])
  @nestAccessControl.UseRoles({
    resource: "QueueHistory",
    action: "read",
    possession: "any",
  })
  async queueHistories(
    @graphql.Args() args: QueueHistoryFindManyArgs
  ): Promise<QueueHistory[]> {
    return this.service.queueHistories(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => QueueHistory, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "QueueHistory",
    action: "read",
    possession: "own",
  })
  async queueHistory(
    @graphql.Args() args: QueueHistoryFindUniqueArgs
  ): Promise<QueueHistory | null> {
    const result = await this.service.queueHistory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => QueueHistory)
  @nestAccessControl.UseRoles({
    resource: "QueueHistory",
    action: "create",
    possession: "any",
  })
  async createQueueHistory(
    @graphql.Args() args: CreateQueueHistoryArgs
  ): Promise<QueueHistory> {
    return await this.service.createQueueHistory({
      ...args,
      data: {
        ...args.data,

        queue: args.data.queue
          ? {
              connect: args.data.queue,
            }
          : undefined,

        queueStatus: args.data.queueStatus
          ? {
              connect: args.data.queueStatus,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => QueueHistory)
  @nestAccessControl.UseRoles({
    resource: "QueueHistory",
    action: "update",
    possession: "any",
  })
  async updateQueueHistory(
    @graphql.Args() args: UpdateQueueHistoryArgs
  ): Promise<QueueHistory | null> {
    try {
      return await this.service.updateQueueHistory({
        ...args,
        data: {
          ...args.data,

          queue: args.data.queue
            ? {
                connect: args.data.queue,
              }
            : undefined,

          queueStatus: args.data.queueStatus
            ? {
                connect: args.data.queueStatus,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => QueueHistory)
  @nestAccessControl.UseRoles({
    resource: "QueueHistory",
    action: "delete",
    possession: "any",
  })
  async deleteQueueHistory(
    @graphql.Args() args: DeleteQueueHistoryArgs
  ): Promise<QueueHistory | null> {
    try {
      return await this.service.deleteQueueHistory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Queue, {
    nullable: true,
    name: "queue",
  })
  @nestAccessControl.UseRoles({
    resource: "Queue",
    action: "read",
    possession: "any",
  })
  async getQueue(
    @graphql.Parent() parent: QueueHistory
  ): Promise<Queue | null> {
    const result = await this.service.getQueue(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => QueueStatus, {
    nullable: true,
    name: "queueStatus",
  })
  @nestAccessControl.UseRoles({
    resource: "QueueStatus",
    action: "read",
    possession: "any",
  })
  async getQueueStatus(
    @graphql.Parent() parent: QueueHistory
  ): Promise<QueueStatus | null> {
    const result = await this.service.getQueueStatus(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
