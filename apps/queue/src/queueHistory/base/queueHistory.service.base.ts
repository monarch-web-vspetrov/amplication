/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  QueueHistory as PrismaQueueHistory,
  Queue as PrismaQueue,
  QueueStatus as PrismaQueueStatus,
} from "@prisma/client";

export class QueueHistoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.QueueHistoryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.queueHistory.count(args);
  }

  async queueHistories(
    args: Prisma.QueueHistoryFindManyArgs
  ): Promise<PrismaQueueHistory[]> {
    return this.prisma.queueHistory.findMany(args);
  }
  async queueHistory(
    args: Prisma.QueueHistoryFindUniqueArgs
  ): Promise<PrismaQueueHistory | null> {
    return this.prisma.queueHistory.findUnique(args);
  }
  async createQueueHistory(
    args: Prisma.QueueHistoryCreateArgs
  ): Promise<PrismaQueueHistory> {
    return this.prisma.queueHistory.create(args);
  }
  async updateQueueHistory(
    args: Prisma.QueueHistoryUpdateArgs
  ): Promise<PrismaQueueHistory> {
    return this.prisma.queueHistory.update(args);
  }
  async deleteQueueHistory(
    args: Prisma.QueueHistoryDeleteArgs
  ): Promise<PrismaQueueHistory> {
    return this.prisma.queueHistory.delete(args);
  }

  async getQueue(parentId: string): Promise<PrismaQueue | null> {
    return this.prisma.queueHistory
      .findUnique({
        where: { id: parentId },
      })
      .queue();
  }

  async getQueueStatus(parentId: string): Promise<PrismaQueueStatus | null> {
    return this.prisma.queueHistory
      .findUnique({
        where: { id: parentId },
      })
      .queueStatus();
  }
}
