/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CarType } from "./CarType";
import { CarTypeCountArgs } from "./CarTypeCountArgs";
import { CarTypeFindManyArgs } from "./CarTypeFindManyArgs";
import { CarTypeFindUniqueArgs } from "./CarTypeFindUniqueArgs";
import { CreateCarTypeArgs } from "./CreateCarTypeArgs";
import { UpdateCarTypeArgs } from "./UpdateCarTypeArgs";
import { DeleteCarTypeArgs } from "./DeleteCarTypeArgs";
import { CarFindManyArgs } from "../../car/base/CarFindManyArgs";
import { Car } from "../../car/base/Car";
import { CarTypeService } from "../carType.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CarType)
export class CarTypeResolverBase {
  constructor(
    protected readonly service: CarTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CarType",
    action: "read",
    possession: "any",
  })
  async _carTypesMeta(
    @graphql.Args() args: CarTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CarType])
  @nestAccessControl.UseRoles({
    resource: "CarType",
    action: "read",
    possession: "any",
  })
  async carTypes(
    @graphql.Args() args: CarTypeFindManyArgs
  ): Promise<CarType[]> {
    return this.service.carTypes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CarType, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CarType",
    action: "read",
    possession: "own",
  })
  async carType(
    @graphql.Args() args: CarTypeFindUniqueArgs
  ): Promise<CarType | null> {
    const result = await this.service.carType(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CarType)
  @nestAccessControl.UseRoles({
    resource: "CarType",
    action: "create",
    possession: "any",
  })
  async createCarType(
    @graphql.Args() args: CreateCarTypeArgs
  ): Promise<CarType> {
    return await this.service.createCarType({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CarType)
  @nestAccessControl.UseRoles({
    resource: "CarType",
    action: "update",
    possession: "any",
  })
  async updateCarType(
    @graphql.Args() args: UpdateCarTypeArgs
  ): Promise<CarType | null> {
    try {
      return await this.service.updateCarType({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CarType)
  @nestAccessControl.UseRoles({
    resource: "CarType",
    action: "delete",
    possession: "any",
  })
  async deleteCarType(
    @graphql.Args() args: DeleteCarTypeArgs
  ): Promise<CarType | null> {
    try {
      return await this.service.deleteCarType(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Car], { name: "cars" })
  @nestAccessControl.UseRoles({
    resource: "Car",
    action: "read",
    possession: "any",
  })
  async findCars(
    @graphql.Parent() parent: CarType,
    @graphql.Args() args: CarFindManyArgs
  ): Promise<Car[]> {
    const results = await this.service.findCars(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
