/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { CarTypeService } from "../carType.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CarTypeCreateInput } from "./CarTypeCreateInput";
import { CarType } from "./CarType";
import { CarTypeFindManyArgs } from "./CarTypeFindManyArgs";
import { CarTypeWhereUniqueInput } from "./CarTypeWhereUniqueInput";
import { CarTypeUpdateInput } from "./CarTypeUpdateInput";
import { CarFindManyArgs } from "../../car/base/CarFindManyArgs";
import { Car } from "../../car/base/Car";
import { CarWhereUniqueInput } from "../../car/base/CarWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CarTypeControllerBase {
  constructor(
    protected readonly service: CarTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CarType })
  @nestAccessControl.UseRoles({
    resource: "CarType",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createCarType(
    @common.Body() data: CarTypeCreateInput
  ): Promise<CarType> {
    return await this.service.createCarType({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        typeField: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [CarType] })
  @ApiNestedQuery(CarTypeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "CarType",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async carTypes(@common.Req() request: Request): Promise<CarType[]> {
    const args = plainToClass(CarTypeFindManyArgs, request.query);
    return this.service.carTypes({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        typeField: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CarType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CarType",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async carType(
    @common.Param() params: CarTypeWhereUniqueInput
  ): Promise<CarType | null> {
    const result = await this.service.carType({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        typeField: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CarType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CarType",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateCarType(
    @common.Param() params: CarTypeWhereUniqueInput,
    @common.Body() data: CarTypeUpdateInput
  ): Promise<CarType | null> {
    try {
      return await this.service.updateCarType({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          typeField: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CarType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CarType",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteCarType(
    @common.Param() params: CarTypeWhereUniqueInput
  ): Promise<CarType | null> {
    try {
      return await this.service.deleteCarType({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          typeField: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/cars")
  @ApiNestedQuery(CarFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Car",
    action: "read",
    possession: "any",
  })
  async findCars(
    @common.Req() request: Request,
    @common.Param() params: CarTypeWhereUniqueInput
  ): Promise<Car[]> {
    const query = plainToClass(CarFindManyArgs, request.query);
    const results = await this.service.findCars(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        userId: true,
        brandId: true,
        carTypeId: true,
        model: true,
        carNumber: true,

        user: {
          select: {
            id: true,
          },
        },

        carBrand: {
          select: {
            id: true,
          },
        },

        carType: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/cars")
  @nestAccessControl.UseRoles({
    resource: "CarType",
    action: "update",
    possession: "any",
  })
  async connectCars(
    @common.Param() params: CarTypeWhereUniqueInput,
    @common.Body() body: CarWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cars: {
        connect: body,
      },
    };
    await this.service.updateCarType({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/cars")
  @nestAccessControl.UseRoles({
    resource: "CarType",
    action: "update",
    possession: "any",
  })
  async updateCars(
    @common.Param() params: CarTypeWhereUniqueInput,
    @common.Body() body: CarWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cars: {
        set: body,
      },
    };
    await this.service.updateCarType({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/cars")
  @nestAccessControl.UseRoles({
    resource: "CarType",
    action: "update",
    possession: "any",
  })
  async disconnectCars(
    @common.Param() params: CarTypeWhereUniqueInput,
    @common.Body() body: CarWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cars: {
        disconnect: body,
      },
    };
    await this.service.updateCarType({
      where: params,
      data,
      select: { id: true },
    });
  }
}
