/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Box } from "./Box";
import { BoxCountArgs } from "./BoxCountArgs";
import { BoxFindManyArgs } from "./BoxFindManyArgs";
import { BoxFindUniqueArgs } from "./BoxFindUniqueArgs";
import { CreateBoxArgs } from "./CreateBoxArgs";
import { UpdateBoxArgs } from "./UpdateBoxArgs";
import { DeleteBoxArgs } from "./DeleteBoxArgs";
import { BoxService } from "../box.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Box)
export class BoxResolverBase {
  constructor(
    protected readonly service: BoxService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Box",
    action: "read",
    possession: "any",
  })
  async _boxesMeta(
    @graphql.Args() args: BoxCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Box])
  @nestAccessControl.UseRoles({
    resource: "Box",
    action: "read",
    possession: "any",
  })
  async boxes(@graphql.Args() args: BoxFindManyArgs): Promise<Box[]> {
    return this.service.boxes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Box, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Box",
    action: "read",
    possession: "own",
  })
  async box(@graphql.Args() args: BoxFindUniqueArgs): Promise<Box | null> {
    const result = await this.service.box(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Box)
  @nestAccessControl.UseRoles({
    resource: "Box",
    action: "create",
    possession: "any",
  })
  async createBox(@graphql.Args() args: CreateBoxArgs): Promise<Box> {
    return await this.service.createBox({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Box)
  @nestAccessControl.UseRoles({
    resource: "Box",
    action: "update",
    possession: "any",
  })
  async updateBox(@graphql.Args() args: UpdateBoxArgs): Promise<Box | null> {
    try {
      return await this.service.updateBox({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Box)
  @nestAccessControl.UseRoles({
    resource: "Box",
    action: "delete",
    possession: "any",
  })
  async deleteBox(@graphql.Args() args: DeleteBoxArgs): Promise<Box | null> {
    try {
      return await this.service.deleteBox(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
