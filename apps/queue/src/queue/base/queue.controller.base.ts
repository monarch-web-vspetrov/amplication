/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { QueueService } from "../queue.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { QueueCreateInput } from "./QueueCreateInput";
import { Queue } from "./Queue";
import { QueueFindManyArgs } from "./QueueFindManyArgs";
import { QueueWhereUniqueInput } from "./QueueWhereUniqueInput";
import { QueueUpdateInput } from "./QueueUpdateInput";
import { QueueHistoryFindManyArgs } from "../../queueHistory/base/QueueHistoryFindManyArgs";
import { QueueHistory } from "../../queueHistory/base/QueueHistory";
import { QueueHistoryWhereUniqueInput } from "../../queueHistory/base/QueueHistoryWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class QueueControllerBase {
  constructor(
    protected readonly service: QueueService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Queue })
  @nestAccessControl.UseRoles({
    resource: "Queue",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createQueue(@common.Body() data: QueueCreateInput): Promise<Queue> {
    return await this.service.createQueue({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,

        car: data.car
          ? {
              connect: data.car,
            }
          : undefined,

        queueStatus: data.queueStatus
          ? {
              connect: data.queueStatus,
            }
          : undefined,

        service: data.service
          ? {
              connect: data.service,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        position: true,
        box: true,
        userId: true,
        userPhone: true,
        carId: true,
        carType: true,
        joinInQueue: true,
        statusId: true,
        finished: true,
        carLeave: true,
        serviceId: true,

        user: {
          select: {
            id: true,
          },
        },

        car: {
          select: {
            id: true,
          },
        },

        queueStatus: {
          select: {
            id: true,
          },
        },

        service: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Queue] })
  @ApiNestedQuery(QueueFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Queue",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async queues(@common.Req() request: Request): Promise<Queue[]> {
    const args = plainToClass(QueueFindManyArgs, request.query);
    return this.service.queues({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        position: true,
        box: true,
        userId: true,
        userPhone: true,
        carId: true,
        carType: true,
        joinInQueue: true,
        statusId: true,
        finished: true,
        carLeave: true,
        serviceId: true,

        user: {
          select: {
            id: true,
          },
        },

        car: {
          select: {
            id: true,
          },
        },

        queueStatus: {
          select: {
            id: true,
          },
        },

        service: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Queue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Queue",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async queue(
    @common.Param() params: QueueWhereUniqueInput
  ): Promise<Queue | null> {
    const result = await this.service.queue({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        position: true,
        box: true,
        userId: true,
        userPhone: true,
        carId: true,
        carType: true,
        joinInQueue: true,
        statusId: true,
        finished: true,
        carLeave: true,
        serviceId: true,

        user: {
          select: {
            id: true,
          },
        },

        car: {
          select: {
            id: true,
          },
        },

        queueStatus: {
          select: {
            id: true,
          },
        },

        service: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Queue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Queue",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateQueue(
    @common.Param() params: QueueWhereUniqueInput,
    @common.Body() data: QueueUpdateInput
  ): Promise<Queue | null> {
    try {
      return await this.service.updateQueue({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,

          car: data.car
            ? {
                connect: data.car,
              }
            : undefined,

          queueStatus: data.queueStatus
            ? {
                connect: data.queueStatus,
              }
            : undefined,

          service: data.service
            ? {
                connect: data.service,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          position: true,
          box: true,
          userId: true,
          userPhone: true,
          carId: true,
          carType: true,
          joinInQueue: true,
          statusId: true,
          finished: true,
          carLeave: true,
          serviceId: true,

          user: {
            select: {
              id: true,
            },
          },

          car: {
            select: {
              id: true,
            },
          },

          queueStatus: {
            select: {
              id: true,
            },
          },

          service: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Queue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Queue",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteQueue(
    @common.Param() params: QueueWhereUniqueInput
  ): Promise<Queue | null> {
    try {
      return await this.service.deleteQueue({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          position: true,
          box: true,
          userId: true,
          userPhone: true,
          carId: true,
          carType: true,
          joinInQueue: true,
          statusId: true,
          finished: true,
          carLeave: true,
          serviceId: true,

          user: {
            select: {
              id: true,
            },
          },

          car: {
            select: {
              id: true,
            },
          },

          queueStatus: {
            select: {
              id: true,
            },
          },

          service: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/queueHistories")
  @ApiNestedQuery(QueueHistoryFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "QueueHistory",
    action: "read",
    possession: "any",
  })
  async findQueueHistories(
    @common.Req() request: Request,
    @common.Param() params: QueueWhereUniqueInput
  ): Promise<QueueHistory[]> {
    const query = plainToClass(QueueHistoryFindManyArgs, request.query);
    const results = await this.service.findQueueHistories(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        queueId: true,
        oldStatusId: true,
        newStatusId: true,
        changedAt: true,

        queue: {
          select: {
            id: true,
          },
        },

        queueStatus: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/queueHistories")
  @nestAccessControl.UseRoles({
    resource: "Queue",
    action: "update",
    possession: "any",
  })
  async connectQueueHistories(
    @common.Param() params: QueueWhereUniqueInput,
    @common.Body() body: QueueHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      queueHistories: {
        connect: body,
      },
    };
    await this.service.updateQueue({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/queueHistories")
  @nestAccessControl.UseRoles({
    resource: "Queue",
    action: "update",
    possession: "any",
  })
  async updateQueueHistories(
    @common.Param() params: QueueWhereUniqueInput,
    @common.Body() body: QueueHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      queueHistories: {
        set: body,
      },
    };
    await this.service.updateQueue({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/queueHistories")
  @nestAccessControl.UseRoles({
    resource: "Queue",
    action: "update",
    possession: "any",
  })
  async disconnectQueueHistories(
    @common.Param() params: QueueWhereUniqueInput,
    @common.Body() body: QueueHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      queueHistories: {
        disconnect: body,
      },
    };
    await this.service.updateQueue({
      where: params,
      data,
      select: { id: true },
    });
  }
}
