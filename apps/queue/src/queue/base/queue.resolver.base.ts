/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Queue } from "./Queue";
import { QueueCountArgs } from "./QueueCountArgs";
import { QueueFindManyArgs } from "./QueueFindManyArgs";
import { QueueFindUniqueArgs } from "./QueueFindUniqueArgs";
import { CreateQueueArgs } from "./CreateQueueArgs";
import { UpdateQueueArgs } from "./UpdateQueueArgs";
import { DeleteQueueArgs } from "./DeleteQueueArgs";
import { QueueHistoryFindManyArgs } from "../../queueHistory/base/QueueHistoryFindManyArgs";
import { QueueHistory } from "../../queueHistory/base/QueueHistory";
import { User } from "../../user/base/User";
import { Car } from "../../car/base/Car";
import { QueueStatus } from "../../queueStatus/base/QueueStatus";
import { Service } from "../../service/base/Service";
import { QueueService } from "../queue.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Queue)
export class QueueResolverBase {
  constructor(
    protected readonly service: QueueService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Queue",
    action: "read",
    possession: "any",
  })
  async _queuesMeta(
    @graphql.Args() args: QueueCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Queue])
  @nestAccessControl.UseRoles({
    resource: "Queue",
    action: "read",
    possession: "any",
  })
  async queues(@graphql.Args() args: QueueFindManyArgs): Promise<Queue[]> {
    return this.service.queues(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Queue, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Queue",
    action: "read",
    possession: "own",
  })
  async queue(
    @graphql.Args() args: QueueFindUniqueArgs
  ): Promise<Queue | null> {
    const result = await this.service.queue(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Queue)
  @nestAccessControl.UseRoles({
    resource: "Queue",
    action: "create",
    possession: "any",
  })
  async createQueue(@graphql.Args() args: CreateQueueArgs): Promise<Queue> {
    return await this.service.createQueue({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,

        car: args.data.car
          ? {
              connect: args.data.car,
            }
          : undefined,

        queueStatus: args.data.queueStatus
          ? {
              connect: args.data.queueStatus,
            }
          : undefined,

        service: args.data.service
          ? {
              connect: args.data.service,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Queue)
  @nestAccessControl.UseRoles({
    resource: "Queue",
    action: "update",
    possession: "any",
  })
  async updateQueue(
    @graphql.Args() args: UpdateQueueArgs
  ): Promise<Queue | null> {
    try {
      return await this.service.updateQueue({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,

          car: args.data.car
            ? {
                connect: args.data.car,
              }
            : undefined,

          queueStatus: args.data.queueStatus
            ? {
                connect: args.data.queueStatus,
              }
            : undefined,

          service: args.data.service
            ? {
                connect: args.data.service,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Queue)
  @nestAccessControl.UseRoles({
    resource: "Queue",
    action: "delete",
    possession: "any",
  })
  async deleteQueue(
    @graphql.Args() args: DeleteQueueArgs
  ): Promise<Queue | null> {
    try {
      return await this.service.deleteQueue(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [QueueHistory], { name: "queueHistories" })
  @nestAccessControl.UseRoles({
    resource: "QueueHistory",
    action: "read",
    possession: "any",
  })
  async findQueueHistories(
    @graphql.Parent() parent: Queue,
    @graphql.Args() args: QueueHistoryFindManyArgs
  ): Promise<QueueHistory[]> {
    const results = await this.service.findQueueHistories(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Queue): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Car, {
    nullable: true,
    name: "car",
  })
  @nestAccessControl.UseRoles({
    resource: "Car",
    action: "read",
    possession: "any",
  })
  async getCar(@graphql.Parent() parent: Queue): Promise<Car | null> {
    const result = await this.service.getCar(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => QueueStatus, {
    nullable: true,
    name: "queueStatus",
  })
  @nestAccessControl.UseRoles({
    resource: "QueueStatus",
    action: "read",
    possession: "any",
  })
  async getQueueStatus(
    @graphql.Parent() parent: Queue
  ): Promise<QueueStatus | null> {
    const result = await this.service.getQueueStatus(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Service, {
    nullable: true,
    name: "service",
  })
  @nestAccessControl.UseRoles({
    resource: "Service",
    action: "read",
    possession: "any",
  })
  async getService(@graphql.Parent() parent: Queue): Promise<Service | null> {
    const result = await this.service.getService(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
