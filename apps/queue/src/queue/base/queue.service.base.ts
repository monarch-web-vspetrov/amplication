/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Queue as PrismaQueue,
  QueueHistory as PrismaQueueHistory,
  User as PrismaUser,
  Car as PrismaCar,
  QueueStatus as PrismaQueueStatus,
  Service as PrismaService,
} from "@prisma/client";

export class QueueServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.QueueCountArgs, "select">): Promise<number> {
    return this.prisma.queue.count(args);
  }

  async queues(args: Prisma.QueueFindManyArgs): Promise<PrismaQueue[]> {
    return this.prisma.queue.findMany(args);
  }
  async queue(args: Prisma.QueueFindUniqueArgs): Promise<PrismaQueue | null> {
    return this.prisma.queue.findUnique(args);
  }
  async createQueue(args: Prisma.QueueCreateArgs): Promise<PrismaQueue> {
    return this.prisma.queue.create(args);
  }
  async updateQueue(args: Prisma.QueueUpdateArgs): Promise<PrismaQueue> {
    return this.prisma.queue.update(args);
  }
  async deleteQueue(args: Prisma.QueueDeleteArgs): Promise<PrismaQueue> {
    return this.prisma.queue.delete(args);
  }

  async findQueueHistories(
    parentId: string,
    args: Prisma.QueueHistoryFindManyArgs
  ): Promise<PrismaQueueHistory[]> {
    return this.prisma.queue
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .queueHistories(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.queue
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }

  async getCar(parentId: string): Promise<PrismaCar | null> {
    return this.prisma.queue
      .findUnique({
        where: { id: parentId },
      })
      .car();
  }

  async getQueueStatus(parentId: string): Promise<PrismaQueueStatus | null> {
    return this.prisma.queue
      .findUnique({
        where: { id: parentId },
      })
      .queueStatus();
  }

  async getService(parentId: string): Promise<PrismaService | null> {
    return this.prisma.queue
      .findUnique({
        where: { id: parentId },
      })
      .service();
  }
}
