/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { QueueStatusService } from "../queueStatus.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { QueueStatusCreateInput } from "./QueueStatusCreateInput";
import { QueueStatus } from "./QueueStatus";
import { QueueStatusFindManyArgs } from "./QueueStatusFindManyArgs";
import { QueueStatusWhereUniqueInput } from "./QueueStatusWhereUniqueInput";
import { QueueStatusUpdateInput } from "./QueueStatusUpdateInput";
import { QueueFindManyArgs } from "../../queue/base/QueueFindManyArgs";
import { Queue } from "../../queue/base/Queue";
import { QueueWhereUniqueInput } from "../../queue/base/QueueWhereUniqueInput";
import { QueueHistoryFindManyArgs } from "../../queueHistory/base/QueueHistoryFindManyArgs";
import { QueueHistory } from "../../queueHistory/base/QueueHistory";
import { QueueHistoryWhereUniqueInput } from "../../queueHistory/base/QueueHistoryWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class QueueStatusControllerBase {
  constructor(
    protected readonly service: QueueStatusService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: QueueStatus })
  @nestAccessControl.UseRoles({
    resource: "QueueStatus",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createQueueStatus(
    @common.Body() data: QueueStatusCreateInput
  ): Promise<QueueStatus> {
    return await this.service.createQueueStatus({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        statusName: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [QueueStatus] })
  @ApiNestedQuery(QueueStatusFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "QueueStatus",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async queueStatuses(@common.Req() request: Request): Promise<QueueStatus[]> {
    const args = plainToClass(QueueStatusFindManyArgs, request.query);
    return this.service.queueStatuses({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        statusName: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: QueueStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "QueueStatus",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async queueStatus(
    @common.Param() params: QueueStatusWhereUniqueInput
  ): Promise<QueueStatus | null> {
    const result = await this.service.queueStatus({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        statusName: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: QueueStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "QueueStatus",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateQueueStatus(
    @common.Param() params: QueueStatusWhereUniqueInput,
    @common.Body() data: QueueStatusUpdateInput
  ): Promise<QueueStatus | null> {
    try {
      return await this.service.updateQueueStatus({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          statusName: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: QueueStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "QueueStatus",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteQueueStatus(
    @common.Param() params: QueueStatusWhereUniqueInput
  ): Promise<QueueStatus | null> {
    try {
      return await this.service.deleteQueueStatus({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          statusName: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/queues")
  @ApiNestedQuery(QueueFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Queue",
    action: "read",
    possession: "any",
  })
  async findQueues(
    @common.Req() request: Request,
    @common.Param() params: QueueStatusWhereUniqueInput
  ): Promise<Queue[]> {
    const query = plainToClass(QueueFindManyArgs, request.query);
    const results = await this.service.findQueues(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        position: true,
        box: true,
        userId: true,
        userPhone: true,
        carId: true,
        carType: true,
        joinInQueue: true,
        statusId: true,
        finished: true,
        carLeave: true,
        serviceId: true,

        user: {
          select: {
            id: true,
          },
        },

        car: {
          select: {
            id: true,
          },
        },

        queueStatus: {
          select: {
            id: true,
          },
        },

        service: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/queues")
  @nestAccessControl.UseRoles({
    resource: "QueueStatus",
    action: "update",
    possession: "any",
  })
  async connectQueues(
    @common.Param() params: QueueStatusWhereUniqueInput,
    @common.Body() body: QueueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      queues: {
        connect: body,
      },
    };
    await this.service.updateQueueStatus({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/queues")
  @nestAccessControl.UseRoles({
    resource: "QueueStatus",
    action: "update",
    possession: "any",
  })
  async updateQueues(
    @common.Param() params: QueueStatusWhereUniqueInput,
    @common.Body() body: QueueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      queues: {
        set: body,
      },
    };
    await this.service.updateQueueStatus({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/queues")
  @nestAccessControl.UseRoles({
    resource: "QueueStatus",
    action: "update",
    possession: "any",
  })
  async disconnectQueues(
    @common.Param() params: QueueStatusWhereUniqueInput,
    @common.Body() body: QueueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      queues: {
        disconnect: body,
      },
    };
    await this.service.updateQueueStatus({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/queueHistories")
  @ApiNestedQuery(QueueHistoryFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "QueueHistory",
    action: "read",
    possession: "any",
  })
  async findQueueHistories(
    @common.Req() request: Request,
    @common.Param() params: QueueStatusWhereUniqueInput
  ): Promise<QueueHistory[]> {
    const query = plainToClass(QueueHistoryFindManyArgs, request.query);
    const results = await this.service.findQueueHistories(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        queueId: true,
        oldStatusId: true,
        newStatusId: true,
        changedAt: true,

        queue: {
          select: {
            id: true,
          },
        },

        queueStatus: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/queueHistories")
  @nestAccessControl.UseRoles({
    resource: "QueueStatus",
    action: "update",
    possession: "any",
  })
  async connectQueueHistories(
    @common.Param() params: QueueStatusWhereUniqueInput,
    @common.Body() body: QueueHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      queueHistories: {
        connect: body,
      },
    };
    await this.service.updateQueueStatus({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/queueHistories")
  @nestAccessControl.UseRoles({
    resource: "QueueStatus",
    action: "update",
    possession: "any",
  })
  async updateQueueHistories(
    @common.Param() params: QueueStatusWhereUniqueInput,
    @common.Body() body: QueueHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      queueHistories: {
        set: body,
      },
    };
    await this.service.updateQueueStatus({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/queueHistories")
  @nestAccessControl.UseRoles({
    resource: "QueueStatus",
    action: "update",
    possession: "any",
  })
  async disconnectQueueHistories(
    @common.Param() params: QueueStatusWhereUniqueInput,
    @common.Body() body: QueueHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      queueHistories: {
        disconnect: body,
      },
    };
    await this.service.updateQueueStatus({
      where: params,
      data,
      select: { id: true },
    });
  }
}
