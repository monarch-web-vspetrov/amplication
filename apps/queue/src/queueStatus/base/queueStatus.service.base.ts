/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  QueueStatus as PrismaQueueStatus,
  Queue as PrismaQueue,
  QueueHistory as PrismaQueueHistory,
} from "@prisma/client";

export class QueueStatusServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.QueueStatusCountArgs, "select">
  ): Promise<number> {
    return this.prisma.queueStatus.count(args);
  }

  async queueStatuses(
    args: Prisma.QueueStatusFindManyArgs
  ): Promise<PrismaQueueStatus[]> {
    return this.prisma.queueStatus.findMany(args);
  }
  async queueStatus(
    args: Prisma.QueueStatusFindUniqueArgs
  ): Promise<PrismaQueueStatus | null> {
    return this.prisma.queueStatus.findUnique(args);
  }
  async createQueueStatus(
    args: Prisma.QueueStatusCreateArgs
  ): Promise<PrismaQueueStatus> {
    return this.prisma.queueStatus.create(args);
  }
  async updateQueueStatus(
    args: Prisma.QueueStatusUpdateArgs
  ): Promise<PrismaQueueStatus> {
    return this.prisma.queueStatus.update(args);
  }
  async deleteQueueStatus(
    args: Prisma.QueueStatusDeleteArgs
  ): Promise<PrismaQueueStatus> {
    return this.prisma.queueStatus.delete(args);
  }

  async findQueues(
    parentId: string,
    args: Prisma.QueueFindManyArgs
  ): Promise<PrismaQueue[]> {
    return this.prisma.queueStatus
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .queues(args);
  }

  async findQueueHistories(
    parentId: string,
    args: Prisma.QueueHistoryFindManyArgs
  ): Promise<PrismaQueueHistory[]> {
    return this.prisma.queueStatus
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .queueHistories(args);
  }
}
